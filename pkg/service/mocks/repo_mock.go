// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AccelByte/accelbyte-go-sdk/services-api/pkg/repository (interfaces: TokenRepository,ConfigRepository,RefreshTokenRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	iamclientmodels "github.com/AccelByte/accelbyte-go-sdk/iam-sdk/pkg/iamclientmodels"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenRepository is a mock of TokenRepository interface.
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository.
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance.
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockTokenRepository) GetToken() (*iamclientmodels.OauthmodelTokenResponseV3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(*iamclientmodels.OauthmodelTokenResponseV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenRepositoryMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenRepository)(nil).GetToken))
}

// RemoveToken mocks base method.
func (m *MockTokenRepository) RemoveToken() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockTokenRepositoryMockRecorder) RemoveToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockTokenRepository)(nil).RemoveToken))
}

// Store mocks base method.
func (m *MockTokenRepository) Store(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockTokenRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTokenRepository)(nil).Store), arg0)
}

// TokenIssuedTimeUTC mocks base method.
func (m *MockTokenRepository) TokenIssuedTimeUTC() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenIssuedTimeUTC")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TokenIssuedTimeUTC indicates an expected call of TokenIssuedTimeUTC.
func (mr *MockTokenRepositoryMockRecorder) TokenIssuedTimeUTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenIssuedTimeUTC", reflect.TypeOf((*MockTokenRepository)(nil).TokenIssuedTimeUTC))
}

// MockConfigRepository is a mock of ConfigRepository interface.
type MockConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepositoryMockRecorder
}

// MockConfigRepositoryMockRecorder is the mock recorder for MockConfigRepository.
type MockConfigRepositoryMockRecorder struct {
	mock *MockConfigRepository
}

// NewMockConfigRepository creates a new mock instance.
func NewMockConfigRepository(ctrl *gomock.Controller) *MockConfigRepository {
	mock := &MockConfigRepository{ctrl: ctrl}
	mock.recorder = &MockConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepository) EXPECT() *MockConfigRepositoryMockRecorder {
	return m.recorder
}

// GetClientId mocks base method.
func (m *MockConfigRepository) GetClientId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientId indicates an expected call of GetClientId.
func (mr *MockConfigRepositoryMockRecorder) GetClientId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientId", reflect.TypeOf((*MockConfigRepository)(nil).GetClientId))
}

// GetClientSecret mocks base method.
func (m *MockConfigRepository) GetClientSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientSecret indicates an expected call of GetClientSecret.
func (mr *MockConfigRepositoryMockRecorder) GetClientSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSecret", reflect.TypeOf((*MockConfigRepository)(nil).GetClientSecret))
}

// GetJusticeBaseUrl mocks base method.
func (m *MockConfigRepository) GetJusticeBaseUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJusticeBaseUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJusticeBaseUrl indicates an expected call of GetJusticeBaseUrl.
func (mr *MockConfigRepositoryMockRecorder) GetJusticeBaseUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJusticeBaseUrl", reflect.TypeOf((*MockConfigRepository)(nil).GetJusticeBaseUrl))
}

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// DisableAutoRefresh mocks base method.
func (m *MockRefreshTokenRepository) DisableAutoRefresh() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutoRefresh")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableAutoRefresh indicates an expected call of DisableAutoRefresh.
func (mr *MockRefreshTokenRepositoryMockRecorder) DisableAutoRefresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutoRefresh", reflect.TypeOf((*MockRefreshTokenRepository)(nil).DisableAutoRefresh))
}

// GetRefreshRate mocks base method.
func (m *MockRefreshTokenRepository) GetRefreshRate() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshRate")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetRefreshRate indicates an expected call of GetRefreshRate.
func (mr *MockRefreshTokenRepositoryMockRecorder) GetRefreshRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshRate", reflect.TypeOf((*MockRefreshTokenRepository)(nil).GetRefreshRate))
}

// SetRefreshIsRunningInBackground mocks base method.
func (m *MockRefreshTokenRepository) SetRefreshIsRunningInBackground(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefreshIsRunningInBackground", arg0)
}

// SetRefreshIsRunningInBackground indicates an expected call of SetRefreshIsRunningInBackground.
func (mr *MockRefreshTokenRepositoryMockRecorder) SetRefreshIsRunningInBackground(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshIsRunningInBackground", reflect.TypeOf((*MockRefreshTokenRepository)(nil).SetRefreshIsRunningInBackground), arg0)
}

func SetupTokenRepositoryExpectations(tokenRepo *MockTokenRepository) {
	expiresIn := int32(3600)
	tokenRepo.EXPECT().Store(gomock.Any()).Return(nil).AnyTimes()
	tokenRepo.EXPECT().GetToken().Return(&iamclientmodels.OauthmodelTokenResponseV3{ExpiresIn: &expiresIn}, nil).AnyTimes()
	tokenRepo.EXPECT().TokenIssuedTimeUTC().Return(time.Now()).AnyTimes()
}

func SetupRefreshTokenRepositoryExpectations(refreshRepo *MockRefreshTokenRepository) {
	refreshRate := float64(1) // Example refresh rate
	refreshRepo.EXPECT().GetRefreshRate().Return(refreshRate).AnyTimes()
}

func MonkeyPatchTokenExpiry(token *iamclientmodels.OauthmodelTokenResponseV3, expiresIn int32) {
	token.ExpiresIn = &expiresIn       // Monkey-patch, force expiry Token
	token.RefreshExpiresIn = expiresIn // Monkey-patch, force expiry refreshToken
}
